plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.9'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


ext {
    set('snippetsDir', file("build/generated-snippets"))
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // ## Swagger ##
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // ## Logging ##
    // Object Converting to Json
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    // p6spy : QueryLog
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Oracle
//    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
//    implementation 'com.oracle.database.security:osdt_cert'
//    implementation 'com.oracle.database.security:oraclepki'
//    implementation 'com.oracle.database.security:osdt_core'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // AWS S3
//    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'
    //Aws S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'


    //test 롬복 사용
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

// querydsl에서 사용할 경로 설정
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.named("compileJava") {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}

// Do not Test (개발용)
test {
    enabled = false
}